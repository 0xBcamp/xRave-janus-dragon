{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../shared/interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../vrf/VRFConsumerBaseV2.sol\";\nimport \"../shared/access/ConfirmedOwner.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\n  uint96 public immutable BASE_FEE;\n  uint96 public immutable GAS_PRICE_LINK;\n  uint16 public immutable MAX_CONSUMERS = 100;\n\n  error InvalidSubscription();\n  error InsufficientBalance();\n  error MustBeSubOwner(address owner);\n  error TooManyConsumers();\n  error InvalidConsumer();\n  error InvalidRandomWords();\n  error Reentrant();\n\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event ConsumerAdded(uint64 indexed subId, address consumer);\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\n  event ConfigSet();\n\n  struct Config {\n    // Reentrancy protection.\n    bool reentrancyLock;\n  }\n  Config private s_config;\n  uint64 s_currentSubId;\n  uint256 s_nextRequestId = 1;\n  uint256 s_nextPreSeed = 100;\n  struct Subscription {\n    address owner;\n    uint96 balance;\n  }\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n  struct Request {\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n  }\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\n    BASE_FEE = _baseFee;\n    GAS_PRICE_LINK = _gasPriceLink;\n    setConfig();\n  }\n\n  /**\n   * @notice Sets the configuration of the vrfv2 mock coordinator\n   */\n  function setConfig() public onlyOwner {\n    s_config = Config({reentrancyLock: false});\n    emit ConfigSet();\n  }\n\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n    address[] memory consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n    if (!consumerIsAdded(_subId, _consumer)) {\n      revert InvalidConsumer();\n    }\n    _;\n  }\n\n  /**\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n  }\n\n  /**\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n  function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\n    uint256 startGas = gasleft();\n    if (s_requests[_requestId].subId == 0) {\n      revert(\"nonexistent request\");\n    }\n    Request memory req = s_requests[_requestId];\n\n    if (_words.length == 0) {\n      _words = new uint256[](req.numWords);\n      for (uint256 i = 0; i < req.numWords; i++) {\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n      }\n    } else if (_words.length != req.numWords) {\n      revert InvalidRandomWords();\n    }\n\n    VRFConsumerBaseV2 v;\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n    s_config.reentrancyLock = true;\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n    s_config.reentrancyLock = false;\n\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n    if (s_subscriptions[req.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[req.subId].balance -= payment;\n    delete (s_requests[_requestId]);\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n  }\n\n  /**\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    uint96 oldBalance = s_subscriptions[_subId].balance;\n    s_subscriptions[_subId].balance += _amount;\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n  }\n\n  function requestRandomWords(\n    bytes32 _keyHash,\n    uint64 _subId,\n    uint16 _minimumRequestConfirmations,\n    uint32 _callbackGasLimit,\n    uint32 _numWords\n  ) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n\n    uint256 requestId = s_nextRequestId++;\n    uint256 preSeed = s_nextPreSeed++;\n\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n    emit RandomWordsRequested(\n      _keyHash,\n      requestId,\n      preSeed,\n      _subId,\n      _minimumRequestConfirmations,\n      _callbackGasLimit,\n      _numWords,\n      msg.sender\n    );\n    return requestId;\n  }\n\n  function createSubscription() external override returns (uint64 _subId) {\n    s_currentSubId++;\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\n    return s_currentSubId;\n  }\n\n  function getSubscription(\n    uint64 _subId\n  ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n  }\n\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n    delete (s_subscriptions[_subId]);\n  }\n\n  modifier onlySubOwner(uint64 _subId) {\n    address owner = s_subscriptions[_subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  function getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\n    return (3, 2000000, new bytes32[](0));\n  }\n\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n\n    if (consumerIsAdded(_subId, _consumer)) {\n      return;\n    }\n\n    s_consumers[_subId].push(_consumer);\n    emit ConsumerAdded(_subId, _consumer);\n  }\n\n  function removeConsumer(\n    uint64 _subId,\n    address _consumer\n  ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\n    address[] storage consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        address last = consumers[consumers.length - 1];\n        consumers[i] = last;\n        consumers.pop();\n        break;\n      }\n    }\n\n    emit ConsumerRemoved(_subId, _consumer);\n  }\n\n  function getConfig()\n    external\n    pure\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (4, 2_500_000, 2_700, 33285);\n  }\n\n  function getFeeConfig()\n    external\n    pure\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  modifier nonReentrant() {\n    if (s_config.reentrancyLock) {\n      revert Reentrant();\n    }\n    _;\n  }\n\n  function getFallbackWeiPerUnitLink() external pure returns (int256) {\n    return 4000000000000000; // 0.004 Ether\n  }\n\n  function requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\n    revert(\"not implemented\");\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IOwnable.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.7.3/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.7.3/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/LPToken1.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract LPToken1 is ERC20 {\n  constructor() ERC20(\"LP Token 1\", \"LPT1\") {\n    _mint( msg.sender , 1000 * 10 ** 18);\n  }\n}\n"
    },
    "contracts/LPToken2.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract LPToken2 is ERC20 {\n  constructor() ERC20(\"LP Token 2\", \"LPT2\") {\n    _mint( msg.sender , 1000 * 10 ** 18);\n  }\n}\n"
    },
    "contracts/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";\n"
    },
    "contracts/RewardToken1.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract RewardToken1 is ERC20 {\n  constructor() ERC20(\"Reward1\", \"RWD1\") {\n    _mint( msg.sender , 1000 * 10 ** 18);\n  }\n}\n"
    },
    "contracts/RewardToken2.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract RewardToken2 is ERC20 {\n  constructor() ERC20(\"Reward2\", \"RWD2\") {\n    _mint( msg.sender , 1000 * 10 ** 18);\n  }\n}\n"
    },
    "contracts/Tournament.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {ECDSAUpgradeable} from \"@openzeppelin/contracts-upgradeable-4.7.3/utils/cryptography/ECDSAUpgradeable.sol\";\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n//import {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"./VRFConsumerBaseV2Upgradeable.sol\";\n\ninterface YearnInterface {\n\tfunction pricePerShare() external view returns (uint256);\n\tfunction token() external view returns (address); // Underlying asset\n}\n\ninterface UniswapInterface {\n\tfunction getReserves() external view returns (uint112, uint112, uint32);\n\tfunction totalSupply() external view returns (uint256);\n\tfunction token0() external view returns (address); // Underlying asset\n\tfunction token1() external view returns (address); // Underlying asset\n}\n\ninterface Factory {\n\tfunction getVrfConfig() external view returns (uint64, bytes32, uint32);\n}\n\ncontract Tournament is Initializable, VRFConsumerBaseV2Upgradeable {\n    using ECDSAUpgradeable for bytes32;\n\n\t//////////////\n\t/// ERRORS ///\n\t//////////////\n\t\t\n\t///////////////////////\n\t/// State Variables ///\n\t///////////////////////\n\n\taddress public owner;\n\t\n\t//TOURNAMENT INFO\n\tstring public name; // Name of the tournament\n\tIERC20Metadata poolIncentivized;\n\tuint256 public depositAmount; // Exact Amount of LP to be deposited by the players\n\tuint32 public startTime;\n\tuint32 public endTime;\n\taddress private factory;\n\tenum Protocol {\n\t\tUniswap,\n\t\tYearn\n\t}\n\tProtocol public protocol;\n\tuint256 private realizedPoolPrize; // Amount of LP left by players that withdrawn\n\tuint256 private realizedFees; // Amount of LP fees left by players that withdrawn\n\tuint64 private unclaimedPoolPrize = 1 ether; // 100% of the pool prize unclaimed\n\tuint64 public fees = 0.1 ether; // 10% fees on pool prize\n\tuint16 public topScore = 0;\n\tuint256 private nbRanks = 1;\n\n\t// PLAYER INFO\n\taddress[] public players;\n\tmapping(uint16 => address[]) public scoreToPlayers; // Used for ranking\n\tmapping(address => Player) public playersMap; //address => Player Struct\n\n\tstruct Player {\n\t\tuint16 score; // how many points each player has\n\t\tuint8 streak; // number of consecutive wins\n\t\tuint32 lastGame; // when the player last played (used to determine if the player already played today)\n\t\tuint depositPricePerShare; // price per share at deposit\n\t}\n\tstruct StoredPlayer {\n\t\taddress addr;\n\t\tbytes32 hash;\n\t\tuint32 lastGame;\n\t}\n\tStoredPlayer private storedPlayer;\n\n\n\t///////////////////////////////\n    /// Chainlink VRF Variables ///\n    ///////////////////////////////\n    struct ContractGame {\n        uint8 playerMove;\n        address player;\n        bool fulfilled; // whether the request has been successfully fulfilled\n        bool exists; // whether a requestId exists\n        uint256[] randomWords;\n        uint8 vrfMove;\n        address winner;\n    }\n\n    // requestId --> GameStatus  @note is there a better way to track games?\n    mapping(uint256 => ContractGame) public contractGameRequestId; \n\n    // past requests Id.\n    uint256[] public requestIds;\n    uint256 public lastRequestId;\n\n    VRFCoordinatorV2Interface private vrfCoordinator;    \n    /// VRF END ///\n\n\t//////////////\n\t/// EVENTS ///\n\t//////////////\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent Staked(address indexed player, uint256 amount);\n\tevent Unstaked(address indexed player, uint256 amount);\n\n\tevent MoveSaved(\n\t\taddress indexed player,\n\t\tuint vrf\n\t);\n\n\tevent Winner(\n\t\taddress indexed player,\n\t\tuint256 day\n\t);\n\n\tevent Loser(\n\t\taddress indexed player,\n\t\tuint256 day\n\t);\n\n\tevent Draw(\n\t\taddress indexed player,\n\t\taddress indexed opponent,\n\t\tuint256 day\n\t);\n\n\t/////////////////\n\t/// MODIFIERS ///\n\t/////////////////\n\n\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\n\t//@note we could use OZ Ownable\n\t// Check the withdraw() function\n\tmodifier onlyOwner() {\n\t\t// msg.sender: predefined variable that represents address of the account that called the current function\n\t\trequire(msg.sender == owner, \"Not the Owner\");\n\t\t_;\n\t}\n\n\tfunction initialize(\n\t\taddress _owner, \n\t\tstring memory _name, \n\t\taddress _poolIncentivized, \n\t\tuint256 _depositAmount, \n\t\tuint32 _startTime, \n\t\tuint32 _endTime, \n\t\taddress _factory,\n\t\taddress _vrfCoordinator\n\t\t) public initializer {\n\t\t\trequire(_startTime < _endTime, \"Start time must be before end time\");\n\t\t\t// Defaults to current block timestamp\n\t\t\tstartTime = _startTime == 0 ? uint32(block.timestamp) : _startTime;\n\t\t\trequire(startTime >= block.timestamp, \"Start time must be today or in the future\");\n\t\t\trequire(_endTime > block.timestamp, \"End time must be in the future\");\n\t\t\trequire(_depositAmount > 0, \"Amount to stake must be greater than 0\");\n\t\t\towner = _owner;\n\t\t\tname = _name;\n\t\t\tdepositAmount = _depositAmount;\n\t\t\tif(_poolIncentivized != address(0)) {\n\t\t\t\tpoolIncentivized = IERC20Metadata(_poolIncentivized);\n\t\t\t\tstring memory symbol = poolIncentivized.symbol();\n\t\t\t\tif(keccak256(abi.encodePacked(symbol)) == keccak256(\"UNI-V2\")) {\n\t\t\t\t\tprotocol = Protocol.Uniswap;\n\t\t\t\t} else {\n\t\t\t\t\tprotocol = Protocol.Yearn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tendTime = _endTime;\n\t\t\tfactory = _factory;\n\t\t\t// VRF\n\t\t\t__VRFConsumerBaseV2Upgradeable_init(_vrfCoordinator);\n\t\t\tvrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\n\t\t}\n\n\t/////////////////////////////\n\t/// Stake & Unstake Funcs ///\n\t/////////////////////////////\n\n\t/**\n\t * @notice Allows the players to stake their LP token to register for the tournament\n\t */\n\tfunction stakeLPToken() public {\n\t\trequire(!isPlayer(msg.sender), \"You have already staked\");\n\t\trequire(stakingAllowed(), \"Staking not allowed\");\n\t\trequire(IERC20(poolIncentivized).transferFrom(msg.sender, address(this), depositAmount)); // Revert message handled by the ERC20 transferFrom function\n\t\tplayersMap[msg.sender].depositPricePerShare = getPricePerShare();\n\t\tplayers.push(msg.sender);\n\t\t// emit: keyword used to trigger an event\n\t\temit Staked(msg.sender, depositAmount);\n\t}\n\n\t/**\n\t * @notice Allows the players to withdraw their entitled LP token amount once the tournament is over\n\t * @dev Also updates the state of the contract to reflect the withdrawal\n\t */\n\tfunction unstakeLPToken() public {\n\t\trequire(isPlayer(msg.sender), \"You have nothing to withdraw\"); // Address never staked or already withdrew\n\t\trequire(unstakingAllowed(), \"Unstaking not allowed\");\n\t\t// Get back its deposited value of underlying assets\n\t\tuint256 amount = withdrawAmountFromDeposit(msg.sender); // corresponds to deposited underlying assets\n\t\tuint256 extraPoolPrize = (1 ether - fees) * (depositAmount - amount) / 1 ether; // How much LP token is left by the user\n\t\trealizedFees += depositAmount - amount - extraPoolPrize;\n\t\t// Add rewards from the game\n\t\tamount += getPrizeAmount(msg.sender);\n\t\trealizedPoolPrize += extraPoolPrize;\n\t\tunclaimedPoolPrize -= getPrizeShare(msg.sender);\n\n\t\tplayersMap[msg.sender].depositPricePerShare = 0; // Reuse of this variable to indicate that the player unstaked its LP token\n\n\t\trequire(IERC20(poolIncentivized).transfer(msg.sender, amount), \"Transfer of LP token Failed\");\n\t\temit Unstaked(msg.sender, amount);\n\t}\n\n\t/**\n\t * @notice Allows the owner to withdraw realized fees\n\t * @dev Total fees will be available for withdrawal once all players have withdrawn\n\t * @dev Partial fees can be withdran at any time after players begun to withdraw\n\t */\n\tfunction withdrawFees() public onlyOwner {\n\t\trequire(realizedFees > 0, \"No fees to withdraw\");\n\t\tuint256 _realizedFees = unclaimedPoolPrize == 0 ? poolIncentivized.balanceOf(address(this)) : realizedFees;\n\t\trealizedFees = 0;\n\t\trequire(IERC20(poolIncentivized).transfer(msg.sender, _realizedFees), \"Transfer of LP token Failed\");\t\t\n\t}\n\n\n\t///////////////////////////\n\t/// GAME PLAY FUNCTIONS ///\n\t///////////////////////////\n\n\t/**\n\t * @notice Generate the hashes corresponding to the player moves\n\t * @param _player is the player address\n\t */\n\tfunction hashMoves(address _player) public view returns(bytes32 hash0, bytes32 hash1, bytes32 hash2) {\n\t\tif(!isActive() || alreadyPlayed(_player) || !isPlayer(_player)) return (0, 0, 0);\n\t\treturn _hashMoves(_player, playersMap[_player].lastGame);\n\t}\n\n\t/**\n\t * @notice Generate the hashes corresponding to the player moves\n\t */\n\tfunction _hashMoves(address _player, uint32 _lastGame) internal view returns(bytes32 hash0, bytes32 hash1, bytes32 hash2) {\n\t\thash0 = keccak256(abi.encodePacked(\n\t\t\t_player,\n\t\t\taddress(this),\n\t\t\tuint(0),\n\t\t\t_lastGame\n\t\t));\n\n\t\thash1 = keccak256(abi.encodePacked(\n\t\t\t_player,\n\t\t\taddress(this),\n\t\t\tuint(1),\n\t\t\t_lastGame\n\t\t));\n\n\t\thash2 = keccak256(abi.encodePacked(\n\t\t\t_player,\n\t\t\taddress(this),\n\t\t\tuint(2),\n\t\t\t_lastGame\n\t\t));\n\t}\n\n\t/**\n\t * @notice Find the player move from its hash\n\t */\n\tfunction recoverMove(address _player, bytes32 _hash, uint32 _lastGame) internal view returns(uint8) {\n\n\t\t(bytes32 hash0, bytes32 hash1, bytes32 hash2) = _hashMoves(_player, _lastGame);\n\t\tif(_hash == hash0) return 0;\n\t\tif(_hash == hash1) return 1;\n\t\tif(_hash == hash2) return 2;\n\t\trevert(\"Invalid move\");\n\t}\n\n\t/**\n\t * @notice Submit a move for play against another player\n\t */\n\tfunction playAgainstPlayer(bytes32 _hash) public {\n\t\trequire(isActive(), \"Tournament is not active\");\n\t\trequire(!alreadyPlayed(msg.sender), \"You already played today\");\n\t\trequire(isPlayer(msg.sender), \"You must deposit before playing\");\n\n        if(storedPlayer.addr != address(0)) {\n\t\t\t// A player is already waiting to be matched\n\t\t\tuint8 senderMove = recoverMove(msg.sender, _hash, playersMap[msg.sender].lastGame);\n\t\t\tuint8 storedMove = recoverMove(storedPlayer.addr, storedPlayer.hash, storedPlayer.lastGame);\n\n            resolveGame(msg.sender, senderMove, storedPlayer.addr, storedMove);\n\t\t\tstoredPlayer.addr = address(0);\n        } else {\n\t\t\t// No player is waiting to be matched, we store the move and wait for a player to join\n\t\t\trecoverMove(msg.sender, _hash, playersMap[msg.sender].lastGame); // We check that the move is valid before saving it\n\n            storedPlayer.addr = msg.sender;\n\t\t\tstoredPlayer.hash = _hash;\n\t\t\tstoredPlayer.lastGame = playersMap[msg.sender].lastGame;\n        }\n\n\t\tplayersMap[msg.sender].lastGame = uint32(block.timestamp);        \n        emit MoveSaved(msg.sender, 0);\n\t}\n\n\t/**\n\t * @notice Submit a move for play against a contract\n\t * @param _move is the player's move\n\t * @return requestId is the requestId generated by chainlink and used to grab the game struct\n\t */\n\tfunction playAgainstContract(uint8 _move) public returns(uint256 requestId) {\n\t\trequire(_move <= 2, \"Invalid move\");\n\t\trequire(isActive(), \"Tournament is not active\");\n\t\trequire(!alreadyPlayed(msg.sender), \"You already played today\");\n\t\trequire(isPlayer(msg.sender), \"You must deposit before playing\");\n\t\tplayersMap[msg.sender].lastGame = uint32(block.timestamp);\n\n        requestId = _requestRandomWords(_move, msg.sender);\n\n        require(requestId > 0, \"Your move could not be processed\");\n\t\temit MoveSaved(msg.sender, requestId);\n\t}\n\n\t////////////////////////\n    //// VRFv2 functions ///\n    ////////////////////////\n\t// fuji info\n    // fuji id: 1341\n    // gaslane: 0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61\n    // vrf: 0x2eD832Ba664535e5886b75D64C46EB9a228C2610\n\n\t/**\n\t * @notice Requests a random number from the VRF\n\t * @dev If a request is successful, the callback function, fulfillRandomWords will be called.\n\t * @param _playerMove is the player's move\n\t * @param _player is the player's address\n\t */\n    function _requestRandomWords(uint8 _playerMove, address _player) internal returns (uint256 requestId) {\n\n\t\t(uint64 _subscriptionId, bytes32 _gasLane, uint32 _callbackGasLimit) = Factory(factory).getVrfConfig();\n\n\t\t// Will revert if subscription is not set and funded.\n\t\t//@todo can I just call this in the play function??\n\t\trequestId = vrfCoordinator.requestRandomWords(\n\t\t\t_gasLane,\n\t\t\t_subscriptionId,\n\t\t\t3, // Number of confirmations\n\t\t\t_callbackGasLimit,\n\t\t\t1 // Number of words\n\t\t);\n\n\t\tcontractGameRequestId[requestId] = ContractGame(\n\t\t\t_playerMove,\n\t\t\t_player,\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tnew uint256[](0),\n\t\t\t3, // Placeholder value indicating unfulfilled request\n\t\t\taddress(0)\n\t\t);\n\n\t\trequestIds.push(requestId);\n\t\tlastRequestId = requestId;\n    }\n\n\t/**\n\t * @notice Handle VRF callback\n\t * @param requestId is the requestId generated by chainlink and used to grab the game struct\n\t * @param randomWords is the random number generated by the VRF\n\t */\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n        // check number is ready\n        require(contractGameRequestId[requestId].exists, \"request not found\");\n      \n        // number of moves size 3 (0rock 1paper 2scissor)\n        uint8 vrfMove = uint8(randomWords[0] % 3);\n\n        ContractGame storage game = contractGameRequestId[requestId];\n\n        game.fulfilled = true;\n        game.randomWords = randomWords;\n        game.vrfMove = vrfMove;\n\n        resolveGame(game.player, game.playerMove, address(0), vrfMove);\n    }\n\n\t//////////////////////////////\n\t/// RESOLVE GAME FUNCTIONS ///\n\t//////////////////////////////\n\n\t/**\n\t * @notice Resolves the game against another player\n\t * @dev Will resolve the game against another player. If against VRF, _stored will be VRF\n\t * @param _senderAddr The address of the player\n\t * @param _senderMove The move the player made\n\t * @param _storedAddr The address of the stored player. Will be 0x0 for VRF\n\t * @param _storedMove The move the stored player made\n\t */\n\tfunction resolveGame(address _senderAddr, uint8 _senderMove, address _storedAddr, uint8 _storedMove) internal {\n\t\tif(_senderMove == _storedMove) {\n            // Draw\n\t\t\tupdateScore(_senderAddr, 1);\n\t\t\tupdateScore(_storedAddr, 1);\n\t\t\temit Draw(_senderAddr, _storedAddr, timeToDate(uint32(block.timestamp)));\n        } else if (((3 + _senderMove - _storedMove) % 3) == 1) {\n            // sender wins\n\t\t\tupdateScore(_senderAddr, 2);\n\t\t\tupdateScore(_storedAddr, 0);\n\t\t\temit Winner(_senderAddr, timeToDate(uint32(block.timestamp)));\n\t\t\temit Loser(_storedAddr, timeToDate(uint32(block.timestamp)));\n        } else {\n\t\t\t// storedPlayer wins\n\t\t\tupdateScore(_storedAddr, 2);\n\t\t\tupdateScore(_senderAddr, 0);\n\t\t\temit Winner(_storedAddr, timeToDate(uint32(block.timestamp)));\n\t\t\temit Loser(_senderAddr, timeToDate(uint32(block.timestamp)));\n        }\n    }\n\n\t/**\n\t * @notice Updates the player score by adding points\n\t * @dev Should be called in any case. Also updates player's rank and streak\n\t * @param _player is the address of the player. VRF will be 0x0\n\t * @param _points 0 = lost, 1 = draw, 2 = won\n\t */\n\tfunction updateScore(address _player, uint8 _points) internal {\n\t\tif(_player == address(0)) return; // We don't update VRF score\n\t\tif(_points == 0) {\n\t\t\tplayersMap[_player].streak = 0;\n\t\t\treturn;\n\t\t} else if(_points == 2) {\n\t\t\tplayersMap[_player].streak += 1;\n\t\t}\n\t\t// We first remove the player from it's current rank\n\t\tuint16 score = playersMap[_player].score;\n\t\tfor(uint i=0; i<scoreToPlayers[score].length; i++) {\n\t\t\tif(scoreToPlayers[score][i] == _player) {\n\t\t\t\tscoreToPlayers[score][i] = scoreToPlayers[score][scoreToPlayers[score].length - 1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(score > 0) {\n\t\t\tscoreToPlayers[score].pop();\n\t\t\tif(scoreToPlayers[score].length == 0) { nbRanks -= 1; } // No more players at this rank\n\t\t}\n\t\t// Now we can update the score and push the user to its new rank\n\t\tplayersMap[_player].score += _points**playersMap[_player].streak;\n\t\tif(topScore < playersMap[_player].score) {\n\t\t\ttopScore = playersMap[_player].score;\n\t\t}\n\t\tscoreToPlayers[playersMap[_player].score].push(_player);\n\t\tif(scoreToPlayers[playersMap[_player].score].length == 1) { nbRanks += 1; } // New rank created for this player\n\t}\n\n\t////////////////////\n\t/// Getter Funcs ///\n\t////////////////////\n\n\tfunction getTournament() public view returns (\n\t\tstring memory rName,\n\t\taddress contractAddress,\n\t\taddress rPoolIncentivized,\n\t\tstring memory rLPTokenSymbol,\n\t\tuint8 rProtocol,\n\t\taddress token0,\n\t\taddress token1,\n\t\tuint256 rdepositAmount,\n\t\tuint8 rDecimals,\n\t\tuint32 rStartTime,\n\t\tuint32 rEndTime,\n\t\tuint16 rPlayers,\n\t\tuint256 poolPrize\n\t) {\n\t\trName = name;\n\t\tcontractAddress = address(this);\n\t\trPoolIncentivized = address(poolIncentivized);\n\t\trLPTokenSymbol = getFancySymbol();\n\t\trProtocol = uint8(protocol);\n\t\t(token0, token1) = getUnderlyingAssets();\n\t\trdepositAmount = depositAmount;\n\t\trDecimals = getLPDecimals();\n\t\trStartTime = startTime;\n\t\trEndTime = endTime;\n\t\trPlayers = getNumberOfPlayers();\n\t\tpoolPrize = getExpectedPoolPrize();\n\t}\n\n\tfunction getGame(uint256 _requestId) public view returns (uint8 playerMove, address gamePlayer, bool fulfilled, bool exists, uint256[] memory randomWords, uint256 vrfMove, address winner) {\n\t\tplayerMove = contractGameRequestId[_requestId].playerMove;\n\t\tgamePlayer = contractGameRequestId[_requestId].player;\n\t\tfulfilled = contractGameRequestId[_requestId].fulfilled;\n\t\texists = contractGameRequestId[_requestId].exists;\n\t\trandomWords = contractGameRequestId[_requestId].randomWords;\n\t\tvrfMove = contractGameRequestId[_requestId].vrfMove;\n\t\twinner = contractGameRequestId[_requestId].winner;\n\t}\n\n\t/**\n\t * @notice Returns the current price per share of the LP token\n\t * @dev Get function for Yearn, while for Uniswap we need to compute k / supply\n\t * @return pPS The current price per share\n\t */\n\tfunction getPricePerShare() public view returns(uint256 pPS) {\n\t\tif(Protocol.Yearn == protocol) {\n\t\t\tYearnInterface yearn = YearnInterface(address(poolIncentivized));\n\t\t\tpPS = yearn.pricePerShare();\n\t\t} else { // Uniswap\n\t\t\tUniswapInterface uniswap = UniswapInterface(address(poolIncentivized));\n\t\t\t(uint112 res0, uint112 res1, ) = uniswap.getReserves();\n\t\t\tuint256 supply = uniswap.totalSupply();\n\t\t\tpPS = uint256(res0) * uint256(res1) / supply;\n\t\t}\n\t}\n\n\t/**\n\t * @notice Returns the current amount of LP token entitled to the player on withdrawal\n\t * @dev Ensures that the player will get the same value of underlying assets that he deposited. Earnings not included\n\t * @param _player The player address\n\t * @return amount The amount of LP token the player would receive if he withdraws now\n\t */\n\tfunction withdrawAmountFromDeposit(address _player) public view returns (uint256 amount) {\n\t\tuint256 pPS = getPricePerShare();\n\t\tif(playersMap[_player].depositPricePerShare == 0) return 0; // User aleady withdrew\n\t\t// We prevent user to receive more LP than deposited in exeptional case where pPS disminushes\n\t\tpPS = (pPS < playersMap[_player].depositPricePerShare) ? playersMap[_player].depositPricePerShare : pPS;\n\t\tamount = depositAmount * playersMap[_player].depositPricePerShare / pPS;\n\t}\n\n\t/**\n\t * @notice Returns the rank of the player\n\t * @dev 50% shared for 1st rank, 25% shared for 2nd rank, etc. 1 ether = 100%\n\t * @param _player The player address\n\t * @return rank The player's rank\n\t * @return split The number of players sharing the same rank\n\t */\n\tfunction getRank(address _player) public view returns (uint16 rank, uint16 split) {\n\t\tif(!isPlayer(_player)) return (0, 0);\n\t\tuint16 cumulativePlayers;\n\t\tfor(uint16 i=topScore; i>=playersMap[_player].score; i--) {\n\t\t\tif(scoreToPlayers[i].length > 0) {\n\t\t\t\tcumulativePlayers += uint16(scoreToPlayers[i].length);\n\t\t\t\trank += 1;\n\t\t\t}\n\t\t\tif(i == 0) { // If the player did not score, he won't be in in the mapping\n\t\t\t\trank += 1;\n\t\t\t\tsplit = uint16(players.length) - cumulativePlayers;\n\t\t\t\treturn (rank, split);\n\t\t\t}\n\t\t}\n\t\tsplit = uint16(scoreToPlayers[playersMap[_player].score].length);\n\t}\n\n\t/**\n\t * @notice Returns the share of the pool prize earned by the player\n\t * @dev 50% shared for 1st rank, 25% shared for 2nd rank, etc. 1 ether = 100%\n\t * @param _player The player address\n\t * @return share The player's share\n\t */\n\tfunction getPrizeShare(address _player) public view returns (uint64 share) {\n\t\t// TODO: how to manage rewards if the number of different ranks is low?\n\t\t(uint256 rank, uint256 split) = getRank(_player);\n\t\tif(split == 0) return 0; // Not a player = no share\n\t\tuint8 multiplier = (nbRanks == rank) ? 2 : 1; // We double the allocation for the last rank so that sum of shares is 100%\n\t\tshare = uint64((multiplier * 1 ether / (2 ** rank)) / split);\n\t}\n\n\t/**\n\t * @notice Returns the total pool prize\n\t * @dev The realized pool price is static while remaining pool prize is dynamic\n\t * @return amount The pool prize amount\n\t */\n\tfunction getPoolPrize() public view returns (uint256 amount) {\n\t\tamount = realizedPoolPrize + getRemainingPoolPrize();\n\t}\n\n\t/**\n\t * @notice Returns the amount of pool prize left\n\t * @dev The number of LP tokens will be obtained from the players that did not withdraw yet\n\t * @return amount The remaining pool prize amount\n\t */\n\tfunction getRemainingPoolPrize() public view returns (uint256 amount) {\n\t\tuint256 extraLP = 0;\n\t\tfor (uint i=0; i<players.length; i++) {\n\t\t\tif(playersMap[players[i]].depositPricePerShare == 0) continue; // The player withdrew, we skip him\n\t\t\textraLP += depositAmount - withdrawAmountFromDeposit(players[i]);\n\t\t}\n\t\tamount = extraLP * (1 ether - fees) / 1 ether;\n\t}\n\n\t/**\n\t * @notice Returns the amount of pool prize earned by the user\n\t * @dev Unclaimed pool prize is cross multiplied by the player share and divided by the unclaimed shares\n\t * @param _player The player address\n\t * @return amount The user pool prize amount\n\t */\n\tfunction getPrizeAmount(address _player) public view returns (uint256 amount) {\n\t\tamount = getRemainingPoolPrize() * getPrizeShare(_player) / unclaimedPoolPrize;\n\t}\n\n\t/**\n\t * @notice Returns if the expected pool prize at the end of the tournament\n\t * @dev Current pool prize is cross multiplied by the duration of the tournament and divided by the elapsed time\n\t * @return (uint256) The expected pool prize amount\n\t */\n\tfunction getExpectedPoolPrize() public view returns (uint256) {\n\t\tif(isFuture()) return 0;\n\t\tif(isEnded()) return getPoolPrize();\n\t\treturn getPoolPrize() * (endTime - startTime) / (1 + block.timestamp - startTime); // Add 1 to avoid division by 0\n\t}\n\n\t/**\n\t * @notice Returns if the amount of fees accrued by the protocol\n\t * @return amount The amount of fees\n\t */\n\tfunction getFees() internal view returns (uint256 amount) {\n\t\tamount = getPoolPrize() * fees / (1 ether - fees);\n\t}\n\n\t/**\n\t * @notice Converts time in seconds to days\n\t * @dev Players can only withdraw if the tournament has ended\n\t * @param _time The time in seconds\n\t * @return days_ The number of days\n\t */\n\tfunction timeToDate(uint32 _time) internal pure returns (uint16 days_) {\n\t\tdays_ = uint16(_time / 1 days);\n\t}\n\n\t/**\n\t * @notice Returns if the tournament is ended\n\t * @dev Players can only withdraw if the tournament has ended. Use unstakingAllowed() to check if unstaking is allowed\n\t * @return ended\n\t */\n\tfunction isEnded() public view returns (bool ended) {\n\t\tended = timeToDate(uint32(block.timestamp)) >= timeToDate(endTime);\n\t}\n\n\t/**\n\t * @notice Returns if the tournament is not yet started\n\t * @dev Players can only stake if the tournament is future. Use stakingAllowed() to check if staking is allowed\n\t * @return future\n\t */\n\tfunction isFuture() public view returns (bool future) {\n\t\tfuture = timeToDate(uint32(block.timestamp)) < timeToDate(startTime);\n\t}\n\n\t/**\n\t * @notice Returns if the tournament is active\n\t * @dev Players can only play if the tournament is active\n\t * @return active\n\t */\n\tfunction isActive() public view returns (bool active) {\n\t\tactive = !isFuture() && !isEnded();\n\t}\n\n\t/**\n\t * @notice Returns if the player is registered in this tournament\n\t * @dev Returns true if the player has made a deposit and has not yet withdrawn\n\t * @param _player The player address\n\t * @return isP\n\t */\n\tfunction isPlayer(address _player) public view returns (bool isP) {\n\t\tisP = playersMap[_player].depositPricePerShare > 0;\n\t}\n\n\t/**\n\t * @notice Returns if the player has already played today\n\t * @dev Resets at O0:OO UTC\n\t * @param _player The player address\n\t */\n\tfunction alreadyPlayed(address _player) public view returns (bool) {\n\t\tuint32 today = timeToDate(uint32(block.timestamp));\n\t\tuint32 lastGame = timeToDate(playersMap[_player].lastGame);\n\t\treturn today == lastGame;\n\t}\n\n\t/**\n\t * @notice Returns the player's score\n\t * @param _player The player address\n\t */\n\tfunction pointsOfPlayer(address _player) public view returns (uint16) {\n\t\treturn playersMap[_player].score;\n\t}\n\n\t/**\n\t * @notice Returns if staking is allowed\n\t * @dev Players can stake anytime until 1 day before the end of the game. If they were able to stake at last minute, they could get a share of the pool prize without any contribution.\n\t * @return (bool)\n\t */\n\tfunction stakingAllowed() public view returns (bool) {\n\t\treturn timeToDate(uint32(block.timestamp)) < timeToDate(endTime - 1 days);\n\t}\n\n\t/**\n\t * @notice Returns if unstaking is allowed\n\t * @dev Players can stake anytime after the end of the game\n\t * @return (bool))\n\t */\n\tfunction unstakingAllowed() public view returns (bool) {\n\t\treturn isEnded();\n\t}\n\n\t/**\n\t * @notice Returns the number of players\n\t * @return number Number of players\n\t */\n\tfunction getNumberOfPlayers() public view returns (uint16 number) {\n\t\tnumber = uint16(players.length);\n\t}\n\n\t/**\n\t * @notice Returns the list of all players\n\t * @return arr List of players\n\t */\n\tfunction getPlayers() public view returns (address[] memory arr) {\n\t\tarr = players;\n\t}\n\n\t/**\n\t * @notice Returns the list of players at a given score\n\t * @param _score The score of the players\n\t * @return arr List of players\n\t */\n\tfunction getPlayersAtScore(uint16 _score) public view returns (address[] memory arr) {\n\t\tif(_score == 0) return new address[](0); // We don't return the list of players without any point\n\t\tarr = scoreToPlayers[_score];\n\t}\n\n\t/**\n\t * @notice Returns data available on the player\n\t * @param _player The address of the player\n\t * @return rank of the player\n\t * @return score of the player\n\t */\n\tfunction getPlayer(address _player) public view returns (uint16 rank, uint16 score) {\n\t\t(rank, ) = getRank(_player);\n\t\tscore = playersMap[_player].score;\n\t}\n\n\t/**\n\t * @notice Returns the number of decimals of the LP token\n\t * @return decimals Number of decimals\n\t */\n\tfunction getLPDecimals() public view returns (uint8 decimals) {\n\t\tdecimals = IERC20Metadata(poolIncentivized).decimals();\n\t}\n\n\t/**\n\t * @notice Returns the symbol of the pool as defined in the pool contract\n\t * @return symbol of the pool\n\t */\n\tfunction getLPSymbol() public view returns (string memory symbol) {\n\t\tsymbol = IERC20Metadata(poolIncentivized).symbol();\n\t}\n\n\t/**\n\t * @notice Returns the addresses of the underlying assets\n\t * @return token0 (address) for yearn or Uniswap\n\t * @return token1 (address) for Uniswap\n\t */\n\tfunction getUnderlyingAssets() public view returns (address token0, address token1) {\n\t\tif(protocol == Protocol.Uniswap) {\n\t\t\ttoken0 = UniswapInterface(address(poolIncentivized)).token0();\n\t\t\ttoken1 = UniswapInterface(address(poolIncentivized)).token1();\n\t\t} else {\n\t\t\ttoken0 = YearnInterface(address(poolIncentivized)).token();\n\t\t\ttoken1 = address(0);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Returns the symbol of the pool\n\t * @dev If the pool is Uniswapn it adds the symbol of the underlying tokens to UNI-V2\n\t * @return symbol \"fancy\" symbol of the pool\n\t */\n\tfunction getFancySymbol() public view returns (string memory symbol) {\n\t\tif(protocol == Protocol.Uniswap) {\n\t\t\taddress token0 = UniswapInterface(address(poolIncentivized)).token0();\n\t\t\taddress token1 = UniswapInterface(address(poolIncentivized)).token1();\n\t\t\tstring memory symbol0 = IERC20Metadata(token0).symbol();\n\t\t\tstring memory symbol1 = IERC20Metadata(token1).symbol();\n\t\t\tsymbol = string.concat(\"UNI-V2 (\",symbol0);\n\t\t\tsymbol = string.concat(symbol, \"-\");\n\t\t\tsymbol = string.concat(symbol, symbol1);\n\t\t\tsymbol = string.concat(symbol, \")\");\n\t\t} else {\n\t\t\tsymbol = getLPSymbol();\n\t\t}\n\t}\n}\n"
    },
    "contracts/TournamentFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Tournament.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\ncontract TournamentFactory {\n\t// State Variables\n\taddress[] public TournamentArray; // Store deployed contracts\n\tmapping(address => Tournament) public TournamentMap;\n\tmapping(address => address) public TournamentPartner;\n\taddress public owner;\n\n\taddress public implementationContract;\n\n    VRFCoordinatorV2Interface private vrfCoordinator;\n    uint64 public subscriptionId;\n    bytes32 public gasLane;\n    uint32 public callbackGasLimit = 1000000;\n\n\tconstructor (address _owner, address _vrfCoordinatorV2) {\n\t\towner = _owner;\n\t\timplementationContract = address(new Tournament());\n\n\t\tvrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorV2);\n        subscriptionId = vrfCoordinator.createSubscription();\n\n\t}\n\t//// VRF deployment to Avax. @todo make structs for each chain? Pass in struct to createTournament() for vrf constructor args.\n\t// uint64 subscriptionId = 1341;\n\t// bytes32 gasLane = 0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61;\n\t// uint32 callbackGasLimit = 500000;\n\t// address vrfCoordinatorV2 = 0x2eD832Ba664535e5886b75D64C46EB9a228C2610;\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent TournamentCreated(\n\t\taddress tournament\n\t);\n\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\n\tmodifier isOwner() {\n\t\trequire(msg.sender == owner, \"Not the Owner\");\n\t\t_;\n\t}\n\n\t/**\n\t * Function that allows anyone to deploy a new tournament contract\n\t *\n\t * @param _name (string) - name of the tournament\n\t * @param _poolIncentivized (address) - address of the pool to incentivize and from which we will accept the LP token\n\t * @param _LPTokenAmount (uint256) - amount of the ERC-20 LP token to stake in order to participate\n\t * @param _startTime (uint256) - block timestamp at which the tournament starts\n\t * @param _endTime (uint256) - block timestamp at which the tournament ends\n\t * @return instance (address) - address of the new tournament\n\t */\n\tfunction createTournament(\n\t\tstring memory _name, \n\t\taddress _poolIncentivized, \n\t\tuint256 _LPTokenAmount, \n\t\tuint32 _startTime, \n\t\tuint32 _endTime\n\t) public returns(address instance) {\n\t\tinstance = Clones.clone(implementationContract);\n\t\tTournament(instance).initialize(\n\t\t\towner, \n\t\t\t_name, \n\t\t\t_poolIncentivized, \n\t\t\t_LPTokenAmount, \n\t\t\t_startTime, \n\t\t\t_endTime, \n\t\t\taddress(this),\n\t\t\taddress(vrfCoordinator)\n\t\t);\n\t\tTournamentArray.push(instance);\n\t\tTournamentMap[instance] = Tournament(instance);\n\t\tvrfCoordinator.addConsumer(subscriptionId, instance);\n\t\temit TournamentCreated(instance);\n\t}\n\n\t/**\n\t * @notice Allows the owner to change the chainlink config\n\t * @dev Gas lanes for each chain can be found here https://docs.chain.link/vrf/v2/subscription/supported-networks\n\t * @param _gasLane (bytes32) - gas lane\n\t * @param _callbackGasLimit (uint32) - callback gas limit\n\t */\n\tfunction setChainlinkConfig(bytes32 _gasLane, uint32 _callbackGasLimit) external isOwner {\n\t\tgasLane = _gasLane;\n\t\tcallbackGasLimit = _callbackGasLimit;\n\t}\n\n\t/**\n\t * @notice Returns the chainlink config\n\t * @dev For use by the proxies when requesting a word to VRF\n\t */\n\tfunction getVrfConfig() public view returns (uint64, bytes32, uint32) {\n\t\treturn (subscriptionId, gasLane, callbackGasLimit);\n\t}\n\n\t/**\n\t * @notice Returns an array of all the tournament contracts\n\t * @return list (address[] memory) - list of all tournament\n\t */\n\tfunction getAllTournaments() public view returns (address[] memory list) {\n\t\tlist = TournamentArray;\n\t}\n\n\t/**\n\t * @notice Returns an array of all the active tournament contracts\n\t * @return activeTournaments (address[] memory) - list of all tournament\n\t */\n\tfunction getAllActiveTournaments() external view returns (address[] memory activeTournaments) {\n\t\tuint activeCount = 0;\n\n\t\t// First pass: Count the number of active tournaments\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\t\t\tif (TournamentMap[TournamentArray[i]].isActive()) {\n\t\t\t\tactiveCount++;\n\t\t\t}\n\t\t}\n\n\t\t// Second pass: Populate the array with active tournaments\n\t\tactiveTournaments = new address[](activeCount);\n\t\tuint currentIndex = 0;\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\t\t\tif (TournamentMap[TournamentArray[i]].isActive()) {\n\t\t\t\tactiveTournaments[currentIndex] = TournamentArray[i];\n\t\t\t\tcurrentIndex++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Returns an array of all the past tournament contracts\n\t * @return pastTournaments (address[] memory) - list of all tournament\n\t */\n\tfunction getAllPastTournaments() external view returns (address[] memory pastTournaments) {\n\t\tuint count = 0;\n\n\t\t// First pass: Count the number of active tournaments\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\n\t\t\tif (TournamentMap[TournamentArray[i]].isEnded()) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t// Second pass: Populate the array with active tournaments\n\t\tpastTournaments = new address[](count);\n\t\tuint currentIndex = 0;\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\n\t\t\tif (TournamentMap[TournamentArray[i]].isEnded()) {\n\t\t\t\tpastTournaments[currentIndex] = TournamentArray[i];\n\t\t\t\tcurrentIndex++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Returns an array of all the future tournament contracts\n\t * @return futureTournaments (address[] memory) - list of all tournament\n\t */\n\tfunction getAllFutureTournaments() external view returns (address[] memory futureTournaments) {\n\t\tuint count = 0;\n\n\n\t\t// First pass: Count the number of active tournaments\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\t\t\tif (TournamentMap[TournamentArray[i]].isFuture()) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t// Second pass: Populate the array with active tournaments\n\t\tfutureTournaments = new address[](count);\n\t\tuint currentIndex = 0;\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\t\t\tif (TournamentMap[TournamentArray[i]].isFuture()) {\n\t\t\t\tfutureTournaments[currentIndex] = TournamentArray[i];\n\t\t\t\tcurrentIndex++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Returns an array of all the tournament entered by a player\n\t * @return playersTournaments (address[] memory) - list of all tournament\n\t */\n\tfunction getTournamentsByPlayer(address _player) external view returns (address[] memory playersTournaments) {\n\t\tuint count = 0;\n\n\t\t// First pass: Count the number of active tournaments\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\t\t\tif (TournamentMap[TournamentArray[i]].isPlayer(_player)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t// Second pass: Populate the array with active tournaments\n\t\tplayersTournaments = new address[](count);\n\t\tuint currentIndex = 0;\n\t\tfor (uint i = 0; i < TournamentArray.length; i++) {\n\n\t\t\tif (TournamentMap[TournamentArray[i]].isPlayer(_player)) {\n\t\t\t\tplayersTournaments[currentIndex] = TournamentArray[i];\n\t\t\t\tcurrentIndex++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function that returns an array of all the tournament a partner created\n\t */\n\tfunction getTournamentsByPartner(address _partner) external view returns (address[] memory) {\n\n\t}\n\n\t/**\n\t * @notice Returns true if the contract is a deployed tournament, false otherwise\n\t * @param _contract (address) - address of the contract\n\t * @return (bool)\n\t */\n\tfunction isTournament(address _contract) external view returns (bool) {\n\t\tif(address(TournamentMap[_contract]) == _contract) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\n"
    },
    "contracts/UniswapV2Pair.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract UniswapV2Pair is ERC20 {\n  constructor(address _token0, address _token1) ERC20(\"Uniswap V2\", \"UNI-V2\") {\n    token0 = _token0;\n    token1 = _token1;\n    _mint( msg.sender , 1000 ether);\n  }\n\n  // totalSupply is sqrt( res0 * res 1 ) at start\n  uint112 reserve0 = 1000 ether;\n  uint112 reserve1 = 1000 ether;\n  address public token0;\n  address public token1;\n\n  function getReserves() public view returns (uint112, uint112, uint32) {\n    uint32 time = uint32(block.timestamp) - 60;\n    return (reserve0, reserve1, time);\n  }\n\n  function setTotalSupply(uint _supply) public {\n    if(_supply > totalSupply()) {\n        uint mint = _supply - totalSupply();\n        _mint( msg.sender , mint);\n    } else {\n        uint burn = totalSupply() - _supply;\n        _burn( msg.sender , burn);\n    }\n  }\n\n  function setReserves(uint112 _reserve0, uint112 _reserve1) public {\n    reserve0 = _reserve0;\n    reserve1 = _reserve1;\n  }\n\n}\n"
    },
    "contracts/USDT.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract USDT is ERC20 {\n  constructor() ERC20(\"Tether\", \"USDT\") {\n    //_mint( msg.sender , 1000 * 10 ** 18);\n  }\n}\n"
    },
    "contracts/VRFConsumerBaseV2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2Upgradeable is Initializable {\n    error OnlyCoordinatorCanFulfill(address have, address want);\n    address private vrfCoordinator;\n\n    function __VRFConsumerBaseV2Upgradeable_init(\n        address _vrfCoordinator\n    ) internal onlyInitializing {\n        vrfCoordinator = _vrfCoordinator;\n    }\n\n    /**\n     * @notice fulfillRandomness handles the VRF response. Your contract must\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n     * @notice principles to keep in mind when implementing your fulfillRandomness\n     * @notice method.\n     *\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n     * @dev signature, and will call it once it has verified the proof\n     * @dev associated with the randomness. (It is triggered via a call to\n     * @dev rawFulfillRandomness, below.)\n     *\n     * @param requestId The Id initially returned by requestRandomness\n     * @param randomWords the VRF output expanded to the requested number of words\n     */\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal virtual;\n\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    // the origin of the call\n    function rawFulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) external {\n        if (msg.sender != vrfCoordinator) {\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n        }\n        fulfillRandomWords(requestId, randomWords);\n    }\n}"
    },
    "contracts/Vyper_contract.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract Vyper_contract is ERC20 {\n  constructor(address _token) ERC20(\"USDT yVault\", \"yvUSDT\") {\n    _mint( msg.sender , 1000 * 10 ** 18);\n    token = _token;\n  }\n\n  uint public pricePerShare = 100000;\n  address public token;\n\n  function setPricePerShare(uint _pricePerShare) public {\n    pricePerShare = _pricePerShare;\n  }\n\n}\n"
    },
    "contracts/WETH.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// learn more: https://docs.openzeppelin.com/contracts/4.x/erc20\n\ncontract WETH is ERC20 {\n  constructor() ERC20(\"Wrapped ETH\", \"WETH\") {\n    //_mint( msg.sender , 1000 * 10 ** 18);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}