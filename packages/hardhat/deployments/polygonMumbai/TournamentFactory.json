{
  "address": "0x6D310172fB5D2C64A5080c8e15E4AB5536f1E5D3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinatorV2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tournament",
          "type": "address"
        }
      ],
      "name": "TournamentCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TournamentArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TournamentMap",
      "outputs": [
        {
          "internalType": "contract Tournament",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TournamentPartner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_poolIncentivized",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_LPTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_endTime",
          "type": "uint32"
        }
      ],
      "name": "createTournament",
      "outputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActiveTournaments",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "activeTournaments",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllFutureTournaments",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "futureTournaments",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPastTournaments",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pastTournaments",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTournaments",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        }
      ],
      "name": "getTournamentsByPartner",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getTournamentsByPlayer",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "playersTournaments",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "isTournament",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setChainlinkConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d5b835b7f37df972e1029ae8e32a7fdc63896a59e947b2ea761c259fd86a1ad",
  "receipt": {
    "to": null,
    "from": "0xCd3C672770495EC50013E40AEd66DBD755BbC584",
    "contractAddress": "0x6D310172fB5D2C64A5080c8e15E4AB5536f1E5D3",
    "transactionIndex": 3,
    "gasUsed": "4428545",
    "logsBloom": "0x
    "blockHash": "0xd7a8183d8d2d7ce71090477c8430e74e5f347efeb8cf3383ff403921740e6676",
    "transactionHash": "0x2d5b835b7f37df972e1029ae8e32a7fdc63896a59e947b2ea761c259fd86a1ad",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 46028389,
        "transactionHash": "0x2d5b835b7f37df972e1029ae8e32a7fdc63896a59e947b2ea761c259fd86a1ad",
        "address": "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
        "topics": [
          "0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf",
          "0x0000000000000000000000000000000000000000000000000000000000001c4d"
        ],
        "data": "0x0000000000000000000000006d310172fb5d2c64a5080c8e15e4ab5536f1e5d3",
        "logIndex": 5,
        "blockHash": "0xd7a8183d8d2d7ce71090477c8430e74e5f347efeb8cf3383ff403921740e6676"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 46028389,
        "transactionHash": "0x2d5b835b7f37df972e1029ae8e32a7fdc63896a59e947b2ea761c259fd86a1ad",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cd3c672770495ec50013e40aed66dbd755bbc584",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d800257be7ac0000000000000000000000000000000000000000000000000002b488e94ae8f3c30000000000000000000000000000000000000000000023a8bfa1b1a40bdb346c00000000000000000000000000000000000000000000000000dc88c3cf0147c30000000000000000000000000000000000000000000023a8c179b1c987c2e06c",
        "logIndex": 6,
        "blockHash": "0xd7a8183d8d2d7ce71090477c8430e74e5f347efeb8cf3383ff403921740e6676"
      }
    ],
    "blockNumber": 46028389,
    "cumulativeGasUsed": "4917279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCd3C672770495EC50013E40AEd66DBD755BbC584",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed"
  ],
  "numDeployments": 1,
  "solcInputHash": "40a317edfab1218159ceea2b9c2108ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tournament\",\"type\":\"address\"}],\"name\":\"TournamentCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TournamentArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TournamentMap\",\"outputs\":[{\"internalType\":\"contract Tournament\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TournamentPartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_poolIncentivized\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_LPTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"}],\"name\":\"createTournament\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveTournaments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"activeTournaments\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFutureTournaments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"futureTournaments\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPastTournaments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pastTournaments\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTournaments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"getTournamentsByPartner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getTournamentsByPlayer\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"playersTournaments\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isTournament\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setChainlinkConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createTournament(string,address,uint256,uint32,uint32)\":{\"params\":{\"_LPTokenAmount\":\"(uint256) - amount of the ERC-20 LP token to stake in order to participate\",\"_endTime\":\"(uint256) - block timestamp at which the tournament ends\",\"_name\":\"(string) - name of the tournament\",\"_poolIncentivized\":\"(address) - address of the pool to incentivize and from which we will accept the LP token\",\"_startTime\":\"(uint256) - block timestamp at which the tournament starts\"},\"returns\":{\"instance\":\"(address) - address of the new tournament\"}},\"getAllActiveTournaments()\":{\"returns\":{\"activeTournaments\":\"(address[] memory) - list of all tournament\"}},\"getAllFutureTournaments()\":{\"returns\":{\"futureTournaments\":\"(address[] memory) - list of all tournament\"}},\"getAllPastTournaments()\":{\"returns\":{\"pastTournaments\":\"(address[] memory) - list of all tournament\"}},\"getAllTournaments()\":{\"returns\":{\"list\":\"(address[] memory) - list of all tournament\"}},\"getTournamentsByPlayer(address)\":{\"returns\":{\"playersTournaments\":\"(address[] memory) - list of all tournament\"}},\"getVrfConfig()\":{\"details\":\"For use by the proxies when requesting a word to VRF\"},\"isTournament(address)\":{\"params\":{\"_contract\":\"(address) - address of the contract\"},\"returns\":{\"_0\":\"(bool)\"}},\"setChainlinkConfig(bytes32,uint32)\":{\"details\":\"Gas lanes for each chain can be found here https://docs.chain.link/vrf/v2/subscription/supported-networks\",\"params\":{\"_callbackGasLimit\":\"(uint32) - callback gas limit\",\"_gasLane\":\"(bytes32) - gas lane\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createTournament(string,address,uint256,uint32,uint32)\":{\"notice\":\"Function that allows anyone to deploy a new tournament contract\"},\"getAllActiveTournaments()\":{\"notice\":\"Returns an array of all the active tournament contracts\"},\"getAllFutureTournaments()\":{\"notice\":\"Returns an array of all the future tournament contracts\"},\"getAllPastTournaments()\":{\"notice\":\"Returns an array of all the past tournament contracts\"},\"getAllTournaments()\":{\"notice\":\"Returns an array of all the tournament contracts\"},\"getTournamentsByPartner(address)\":{\"notice\":\"Function that returns an array of all the tournament a partner created\"},\"getTournamentsByPlayer(address)\":{\"notice\":\"Returns an array of all the tournament entered by a player\"},\"getVrfConfig()\":{\"notice\":\"Returns the chainlink config\"},\"isTournament(address)\":{\"notice\":\"Returns true if the contract is a deployed tournament, false otherwise\"},\"setChainlinkConfig(bytes32,uint32)\":{\"notice\":\"Allows the owner to change the chainlink config\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TournamentFactory.sol\":\"TournamentFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.7.3/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/Tournament.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-4.7.3/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n//import {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"./VRFConsumerBaseV2Upgradeable.sol\\\";\\n\\ninterface YearnInterface {\\n\\tfunction pricePerShare() external view returns (uint256);\\n\\tfunction token() external view returns (address); // Underlying asset\\n}\\n\\ninterface UniswapInterface {\\n\\tfunction getReserves() external view returns (uint112, uint112, uint32);\\n\\tfunction totalSupply() external view returns (uint256);\\n\\tfunction token0() external view returns (address); // Underlying asset\\n\\tfunction token1() external view returns (address); // Underlying asset\\n}\\n\\ninterface Factory {\\n\\tfunction getVrfConfig() external view returns (uint64, bytes32, uint32);\\n}\\n\\ncontract Tournament is Initializable, VRFConsumerBaseV2Upgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n\\t//////////////\\n\\t/// ERRORS ///\\n\\t//////////////\\n\\t\\t\\n\\t///////////////////////\\n\\t/// State Variables ///\\n\\t///////////////////////\\n\\n\\taddress public owner;\\n\\t\\n\\t//TOURNAMENT INFO\\n\\tstring public name; // Name of the tournament\\n\\tIERC20Metadata poolIncentivized;\\n\\tuint256 public depositAmount; // Exact Amount of LP to be deposited by the players\\n\\tuint32 public startTime;\\n\\tuint32 public endTime;\\n\\taddress private factory;\\n\\tenum Protocol {\\n\\t\\tUniswap,\\n\\t\\tYearn\\n\\t}\\n\\tProtocol public protocol;\\n\\tuint256 private realizedPoolPrize; // Amount of LP left by players that withdrawn\\n\\tuint256 private realizedFees; // Amount of LP fees left by players that withdrawn\\n\\tuint64 private unclaimedPoolPrize = 1 ether; // 100% of the pool prize unclaimed\\n\\tuint64 public fees = 0.1 ether; // 10% fees on pool prize\\n\\tuint16 public topScore = 0;\\n\\tuint256 private nbRanks = 1;\\n\\n\\t// PLAYER INFO\\n\\taddress[] public players;\\n\\tmapping(uint16 => address[]) public scoreToPlayers; // Used for ranking\\n\\tmapping(address => Player) public playersMap; //address => Player Struct\\n\\n\\tstruct Player {\\n\\t\\tuint16 score; // how many points each player has\\n\\t\\tuint8 streak; // number of consecutive wins\\n\\t\\tuint32 lastGame; // when the player last played (used to determine if the player already played today)\\n\\t\\tuint depositPricePerShare; // price per share at deposit\\n\\t}\\n\\tstruct StoredPlayer {\\n\\t\\taddress addr;\\n\\t\\tbytes32 hash;\\n\\t\\tuint32 lastGame;\\n\\t}\\n\\tStoredPlayer private storedPlayer;\\n\\n\\n\\t///////////////////////////////\\n    /// Chainlink VRF Variables ///\\n    ///////////////////////////////\\n    struct ContractGame {\\n        uint8 playerMove;\\n        address player;\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n        uint8 vrfMove;\\n        address winner;\\n    }\\n\\n    // requestId --> GameStatus  @note is there a better way to track games?\\n    mapping(uint256 => ContractGame) public contractGameRequestId; \\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    VRFCoordinatorV2Interface private vrfCoordinator;    \\n    /// VRF END ///\\n\\n\\t//////////////\\n\\t/// EVENTS ///\\n\\t//////////////\\n\\n\\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\\n\\tevent Staked(address indexed player, uint256 amount);\\n\\tevent Unstaked(address indexed player, uint256 amount);\\n\\n\\tevent MoveSaved(\\n\\t\\taddress indexed player,\\n\\t\\tuint vrf\\n\\t);\\n\\n\\tevent Winner(\\n\\t\\taddress indexed player,\\n\\t\\tuint256 day\\n\\t);\\n\\n\\tevent Loser(\\n\\t\\taddress indexed player,\\n\\t\\tuint256 day\\n\\t);\\n\\n\\tevent Draw(\\n\\t\\taddress indexed player,\\n\\t\\taddress indexed opponent,\\n\\t\\tuint256 day\\n\\t);\\n\\n\\t/////////////////\\n\\t/// MODIFIERS ///\\n\\t/////////////////\\n\\n\\n\\t// Modifier: used to define a set of rules that must be met before or after a function is executed\\n\\t//@note we could use OZ Ownable\\n\\t// Check the withdraw() function\\n\\tmodifier onlyOwner() {\\n\\t\\t// msg.sender: predefined variable that represents address of the account that called the current function\\n\\t\\trequire(msg.sender == owner, \\\"Not the Owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress _owner, \\n\\t\\tstring memory _name, \\n\\t\\taddress _poolIncentivized, \\n\\t\\tuint256 _depositAmount, \\n\\t\\tuint32 _startTime, \\n\\t\\tuint32 _endTime, \\n\\t\\taddress _factory,\\n\\t\\taddress _vrfCoordinator\\n\\t\\t) public initializer {\\n\\t\\t\\trequire(_startTime < _endTime, \\\"Start time must be before end time\\\");\\n\\t\\t\\t// Defaults to current block timestamp\\n\\t\\t\\tstartTime = _startTime == 0 ? uint32(block.timestamp) : _startTime;\\n\\t\\t\\trequire(startTime >= block.timestamp, \\\"Start time must be today or in the future\\\");\\n\\t\\t\\trequire(_endTime > block.timestamp, \\\"End time must be in the future\\\");\\n\\t\\t\\trequire(_depositAmount > 0, \\\"Amount to stake must be greater than 0\\\");\\n\\t\\t\\towner = _owner;\\n\\t\\t\\tname = _name;\\n\\t\\t\\tdepositAmount = _depositAmount;\\n\\t\\t\\tif(_poolIncentivized != address(0)) {\\n\\t\\t\\t\\tpoolIncentivized = IERC20Metadata(_poolIncentivized);\\n\\t\\t\\t\\tstring memory symbol = poolIncentivized.symbol();\\n\\t\\t\\t\\tif(keccak256(abi.encodePacked(symbol)) == keccak256(\\\"UNI-V2\\\")) {\\n\\t\\t\\t\\t\\tprotocol = Protocol.Uniswap;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tprotocol = Protocol.Yearn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tendTime = _endTime;\\n\\t\\t\\tfactory = _factory;\\n\\t\\t\\t// VRF\\n\\t\\t\\t__VRFConsumerBaseV2Upgradeable_init(_vrfCoordinator);\\n\\t\\t\\tvrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n\\t\\t}\\n\\n\\t/////////////////////////////\\n\\t/// Stake & Unstake Funcs ///\\n\\t/////////////////////////////\\n\\n\\t/**\\n\\t * @notice Allows the players to stake their LP token to register for the tournament\\n\\t */\\n\\tfunction stakeLPToken() public {\\n\\t\\trequire(!isPlayer(msg.sender), \\\"You have already staked\\\");\\n\\t\\trequire(stakingAllowed(), \\\"Staking not allowed\\\");\\n\\t\\trequire(IERC20(poolIncentivized).transferFrom(msg.sender, address(this), depositAmount)); // Revert message handled by the ERC20 transferFrom function\\n\\t\\tplayersMap[msg.sender].depositPricePerShare = getPricePerShare();\\n\\t\\tplayers.push(msg.sender);\\n\\t\\t// emit: keyword used to trigger an event\\n\\t\\temit Staked(msg.sender, depositAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the players to withdraw their entitled LP token amount once the tournament is over\\n\\t * @dev Also updates the state of the contract to reflect the withdrawal\\n\\t */\\n\\tfunction unstakeLPToken() public {\\n\\t\\trequire(isPlayer(msg.sender), \\\"You have nothing to withdraw\\\"); // Address never staked or already withdrew\\n\\t\\trequire(unstakingAllowed(), \\\"Unstaking not allowed\\\");\\n\\t\\t// Get back its deposited value of underlying assets\\n\\t\\tuint256 amount = withdrawAmountFromDeposit(msg.sender); // corresponds to deposited underlying assets\\n\\t\\tuint256 extraPoolPrize = (1 ether - fees) * (depositAmount - amount) / 1 ether; // How much LP token is left by the user\\n\\t\\trealizedFees += depositAmount - amount - extraPoolPrize;\\n\\t\\t// Add rewards from the game\\n\\t\\tamount += getPrizeAmount(msg.sender);\\n\\t\\trealizedPoolPrize += extraPoolPrize;\\n\\t\\tunclaimedPoolPrize -= getPrizeShare(msg.sender);\\n\\n\\t\\tplayersMap[msg.sender].depositPricePerShare = 0; // Reuse of this variable to indicate that the player unstaked its LP token\\n\\n\\t\\trequire(IERC20(poolIncentivized).transfer(msg.sender, amount), \\\"Transfer of LP token Failed\\\");\\n\\t\\temit Unstaked(msg.sender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the owner to withdraw realized fees\\n\\t * @dev Total fees will be available for withdrawal once all players have withdrawn\\n\\t * @dev Partial fees can be withdran at any time after players begun to withdraw\\n\\t */\\n\\tfunction withdrawFees() public onlyOwner {\\n\\t\\trequire(realizedFees > 0, \\\"No fees to withdraw\\\");\\n\\t\\tuint256 _realizedFees = unclaimedPoolPrize == 0 ? poolIncentivized.balanceOf(address(this)) : realizedFees;\\n\\t\\trealizedFees = 0;\\n\\t\\trequire(IERC20(poolIncentivized).transfer(msg.sender, _realizedFees), \\\"Transfer of LP token Failed\\\");\\t\\t\\n\\t}\\n\\n\\n\\t///////////////////////////\\n\\t/// GAME PLAY FUNCTIONS ///\\n\\t///////////////////////////\\n\\n\\t/**\\n\\t * @notice Generate the hashes corresponding to the player moves\\n\\t * @param _player is the player address\\n\\t */\\n\\tfunction hashMoves(address _player) public view returns(bytes32 hash0, bytes32 hash1, bytes32 hash2) {\\n\\t\\tif(!isActive() || alreadyPlayed(_player) || !isPlayer(_player)) return (0, 0, 0);\\n\\t\\treturn _hashMoves(_player, playersMap[_player].lastGame);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Generate the hashes corresponding to the player moves\\n\\t */\\n\\tfunction _hashMoves(address _player, uint32 _lastGame) internal view returns(bytes32 hash0, bytes32 hash1, bytes32 hash2) {\\n\\t\\thash0 = keccak256(abi.encodePacked(\\n\\t\\t\\t_player,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tuint(0),\\n\\t\\t\\t_lastGame\\n\\t\\t));\\n\\n\\t\\thash1 = keccak256(abi.encodePacked(\\n\\t\\t\\t_player,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tuint(1),\\n\\t\\t\\t_lastGame\\n\\t\\t));\\n\\n\\t\\thash2 = keccak256(abi.encodePacked(\\n\\t\\t\\t_player,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tuint(2),\\n\\t\\t\\t_lastGame\\n\\t\\t));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Find the player move from its hash\\n\\t */\\n\\tfunction recoverMove(address _player, bytes32 _hash, uint32 _lastGame) internal view returns(uint8) {\\n\\n\\t\\t(bytes32 hash0, bytes32 hash1, bytes32 hash2) = _hashMoves(_player, _lastGame);\\n\\t\\tif(_hash == hash0) return 0;\\n\\t\\tif(_hash == hash1) return 1;\\n\\t\\tif(_hash == hash2) return 2;\\n\\t\\trevert(\\\"Invalid move\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Submit a move for play against another player\\n\\t */\\n\\tfunction playAgainstPlayer(bytes32 _hash) public {\\n\\t\\trequire(isActive(), \\\"Tournament is not active\\\");\\n\\t\\trequire(!alreadyPlayed(msg.sender), \\\"You already played today\\\");\\n\\t\\trequire(isPlayer(msg.sender), \\\"You must deposit before playing\\\");\\n\\n        if(storedPlayer.addr != address(0)) {\\n\\t\\t\\t// A player is already waiting to be matched\\n\\t\\t\\tuint8 senderMove = recoverMove(msg.sender, _hash, playersMap[msg.sender].lastGame);\\n\\t\\t\\tuint8 storedMove = recoverMove(storedPlayer.addr, storedPlayer.hash, storedPlayer.lastGame);\\n\\n            resolveGame(msg.sender, senderMove, storedPlayer.addr, storedMove);\\n\\t\\t\\tstoredPlayer.addr = address(0);\\n        } else {\\n\\t\\t\\t// No player is waiting to be matched, we store the move and wait for a player to join\\n\\t\\t\\trecoverMove(msg.sender, _hash, playersMap[msg.sender].lastGame); // We check that the move is valid before saving it\\n\\n            storedPlayer.addr = msg.sender;\\n\\t\\t\\tstoredPlayer.hash = _hash;\\n\\t\\t\\tstoredPlayer.lastGame = playersMap[msg.sender].lastGame;\\n        }\\n\\n\\t\\tplayersMap[msg.sender].lastGame = uint32(block.timestamp);        \\n        emit MoveSaved(msg.sender, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Submit a move for play against a contract\\n\\t * @param _move is the player's move\\n\\t * @return requestId is the requestId generated by chainlink and used to grab the game struct\\n\\t */\\n\\tfunction playAgainstContract(uint8 _move) public returns(uint256 requestId) {\\n\\t\\trequire(_move <= 2, \\\"Invalid move\\\");\\n\\t\\trequire(isActive(), \\\"Tournament is not active\\\");\\n\\t\\trequire(!alreadyPlayed(msg.sender), \\\"You already played today\\\");\\n\\t\\trequire(isPlayer(msg.sender), \\\"You must deposit before playing\\\");\\n\\t\\tplayersMap[msg.sender].lastGame = uint32(block.timestamp);\\n\\n        requestId = _requestRandomWords(_move, msg.sender);\\n\\n        require(requestId > 0, \\\"Your move could not be processed\\\");\\n\\t\\temit MoveSaved(msg.sender, requestId);\\n\\t}\\n\\n\\t////////////////////////\\n    //// VRFv2 functions ///\\n    ////////////////////////\\n\\t// fuji info\\n    // fuji id: 1341\\n    // gaslane: 0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61\\n    // vrf: 0x2eD832Ba664535e5886b75D64C46EB9a228C2610\\n\\n\\t/**\\n\\t * @notice Requests a random number from the VRF\\n\\t * @dev If a request is successful, the callback function, fulfillRandomWords will be called.\\n\\t * @param _playerMove is the player's move\\n\\t * @param _player is the player's address\\n\\t */\\n    function _requestRandomWords(uint8 _playerMove, address _player) internal returns (uint256 requestId) {\\n\\n\\t\\t(uint64 _subscriptionId, bytes32 _gasLane, uint32 _callbackGasLimit) = Factory(factory).getVrfConfig();\\n\\n\\t\\t// Will revert if subscription is not set and funded.\\n\\t\\t//@todo can I just call this in the play function??\\n\\t\\trequestId = vrfCoordinator.requestRandomWords(\\n\\t\\t\\t_gasLane,\\n\\t\\t\\t_subscriptionId,\\n\\t\\t\\t3, // Number of confirmations\\n\\t\\t\\t_callbackGasLimit,\\n\\t\\t\\t1 // Number of words\\n\\t\\t);\\n\\n\\t\\tcontractGameRequestId[requestId] = ContractGame(\\n\\t\\t\\t_playerMove,\\n\\t\\t\\t_player,\\n\\t\\t\\tfalse,\\n\\t\\t\\ttrue,\\n\\t\\t\\tnew uint256[](0),\\n\\t\\t\\t3, // Placeholder value indicating unfulfilled request\\n\\t\\t\\taddress(0)\\n\\t\\t);\\n\\n\\t\\trequestIds.push(requestId);\\n\\t\\tlastRequestId = requestId;\\n    }\\n\\n\\t/**\\n\\t * @notice Handle VRF callback\\n\\t * @param requestId is the requestId generated by chainlink and used to grab the game struct\\n\\t * @param randomWords is the random number generated by the VRF\\n\\t */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        // check number is ready\\n        require(contractGameRequestId[requestId].exists, \\\"request not found\\\");\\n      \\n        // number of moves size 3 (0rock 1paper 2scissor)\\n        uint8 vrfMove = uint8(randomWords[0] % 3);\\n\\n        ContractGame storage game = contractGameRequestId[requestId];\\n\\n        game.fulfilled = true;\\n        game.randomWords = randomWords;\\n        game.vrfMove = vrfMove;\\n\\n        resolveGame(game.player, game.playerMove, address(0), vrfMove);\\n    }\\n\\n\\t//////////////////////////////\\n\\t/// RESOLVE GAME FUNCTIONS ///\\n\\t//////////////////////////////\\n\\n\\t/**\\n\\t * @notice Resolves the game against another player\\n\\t * @dev Will resolve the game against another player. If against VRF, _stored will be VRF\\n\\t * @param _senderAddr The address of the player\\n\\t * @param _senderMove The move the player made\\n\\t * @param _storedAddr The address of the stored player. Will be 0x0 for VRF\\n\\t * @param _storedMove The move the stored player made\\n\\t */\\n\\tfunction resolveGame(address _senderAddr, uint8 _senderMove, address _storedAddr, uint8 _storedMove) internal {\\n\\t\\tif(_senderMove == _storedMove) {\\n            // Draw\\n\\t\\t\\tupdateScore(_senderAddr, 1);\\n\\t\\t\\tupdateScore(_storedAddr, 1);\\n\\t\\t\\temit Draw(_senderAddr, _storedAddr, timeToDate(uint32(block.timestamp)));\\n        } else if (((3 + _senderMove - _storedMove) % 3) == 1) {\\n            // sender wins\\n\\t\\t\\tupdateScore(_senderAddr, 2);\\n\\t\\t\\tupdateScore(_storedAddr, 0);\\n\\t\\t\\temit Winner(_senderAddr, timeToDate(uint32(block.timestamp)));\\n\\t\\t\\temit Loser(_storedAddr, timeToDate(uint32(block.timestamp)));\\n        } else {\\n\\t\\t\\t// storedPlayer wins\\n\\t\\t\\tupdateScore(_storedAddr, 2);\\n\\t\\t\\tupdateScore(_senderAddr, 0);\\n\\t\\t\\temit Winner(_storedAddr, timeToDate(uint32(block.timestamp)));\\n\\t\\t\\temit Loser(_senderAddr, timeToDate(uint32(block.timestamp)));\\n        }\\n    }\\n\\n\\t/**\\n\\t * @notice Updates the player score by adding points\\n\\t * @dev Should be called in any case. Also updates player's rank and streak\\n\\t * @param _player is the address of the player. VRF will be 0x0\\n\\t * @param _points 0 = lost, 1 = draw, 2 = won\\n\\t */\\n\\tfunction updateScore(address _player, uint8 _points) internal {\\n\\t\\tif(_player == address(0)) return; // We don't update VRF score\\n\\t\\tif(_points == 0) {\\n\\t\\t\\tplayersMap[_player].streak = 0;\\n\\t\\t\\treturn;\\n\\t\\t} else if(_points == 2) {\\n\\t\\t\\tplayersMap[_player].streak += 1;\\n\\t\\t}\\n\\t\\t// We first remove the player from it's current rank\\n\\t\\tuint16 score = playersMap[_player].score;\\n\\t\\tfor(uint i=0; i<scoreToPlayers[score].length; i++) {\\n\\t\\t\\tif(scoreToPlayers[score][i] == _player) {\\n\\t\\t\\t\\tscoreToPlayers[score][i] = scoreToPlayers[score][scoreToPlayers[score].length - 1];\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(score > 0) {\\n\\t\\t\\tscoreToPlayers[score].pop();\\n\\t\\t\\tif(scoreToPlayers[score].length == 0) { nbRanks -= 1; } // No more players at this rank\\n\\t\\t}\\n\\t\\t// Now we can update the score and push the user to its new rank\\n\\t\\tplayersMap[_player].score += _points**playersMap[_player].streak;\\n\\t\\tif(topScore < playersMap[_player].score) {\\n\\t\\t\\ttopScore = playersMap[_player].score;\\n\\t\\t}\\n\\t\\tscoreToPlayers[playersMap[_player].score].push(_player);\\n\\t\\tif(scoreToPlayers[playersMap[_player].score].length == 1) { nbRanks += 1; } // New rank created for this player\\n\\t}\\n\\n\\t////////////////////\\n\\t/// Getter Funcs ///\\n\\t////////////////////\\n\\n\\tfunction getTournament() public view returns (\\n\\t\\tstring memory rName,\\n\\t\\taddress contractAddress,\\n\\t\\taddress rPoolIncentivized,\\n\\t\\tstring memory rLPTokenSymbol,\\n\\t\\tuint8 rProtocol,\\n\\t\\taddress token0,\\n\\t\\taddress token1,\\n\\t\\tuint256 rdepositAmount,\\n\\t\\tuint8 rDecimals,\\n\\t\\tuint32 rStartTime,\\n\\t\\tuint32 rEndTime,\\n\\t\\tuint16 rPlayers,\\n\\t\\tuint256 poolPrize\\n\\t) {\\n\\t\\trName = name;\\n\\t\\tcontractAddress = address(this);\\n\\t\\trPoolIncentivized = address(poolIncentivized);\\n\\t\\trLPTokenSymbol = getFancySymbol();\\n\\t\\trProtocol = uint8(protocol);\\n\\t\\t(token0, token1) = getUnderlyingAssets();\\n\\t\\trdepositAmount = depositAmount;\\n\\t\\trDecimals = getLPDecimals();\\n\\t\\trStartTime = startTime;\\n\\t\\trEndTime = endTime;\\n\\t\\trPlayers = getNumberOfPlayers();\\n\\t\\tpoolPrize = getExpectedPoolPrize();\\n\\t}\\n\\n\\tfunction getGame(uint256 _requestId) public view returns (uint8 playerMove, address gamePlayer, bool fulfilled, bool exists, uint256[] memory randomWords, uint256 vrfMove, address winner) {\\n\\t\\tplayerMove = contractGameRequestId[_requestId].playerMove;\\n\\t\\tgamePlayer = contractGameRequestId[_requestId].player;\\n\\t\\tfulfilled = contractGameRequestId[_requestId].fulfilled;\\n\\t\\texists = contractGameRequestId[_requestId].exists;\\n\\t\\trandomWords = contractGameRequestId[_requestId].randomWords;\\n\\t\\tvrfMove = contractGameRequestId[_requestId].vrfMove;\\n\\t\\twinner = contractGameRequestId[_requestId].winner;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the current price per share of the LP token\\n\\t * @dev Get function for Yearn, while for Uniswap we need to compute k / supply\\n\\t * @return pPS The current price per share\\n\\t */\\n\\tfunction getPricePerShare() public view returns(uint256 pPS) {\\n\\t\\tif(Protocol.Yearn == protocol) {\\n\\t\\t\\tYearnInterface yearn = YearnInterface(address(poolIncentivized));\\n\\t\\t\\tpPS = yearn.pricePerShare();\\n\\t\\t} else { // Uniswap\\n\\t\\t\\tUniswapInterface uniswap = UniswapInterface(address(poolIncentivized));\\n\\t\\t\\t(uint112 res0, uint112 res1, ) = uniswap.getReserves();\\n\\t\\t\\tuint256 supply = uniswap.totalSupply();\\n\\t\\t\\tpPS = uint256(res0) * uint256(res1) / supply;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the current amount of LP token entitled to the player on withdrawal\\n\\t * @dev Ensures that the player will get the same value of underlying assets that he deposited. Earnings not included\\n\\t * @param _player The player address\\n\\t * @return amount The amount of LP token the player would receive if he withdraws now\\n\\t */\\n\\tfunction withdrawAmountFromDeposit(address _player) public view returns (uint256 amount) {\\n\\t\\tuint256 pPS = getPricePerShare();\\n\\t\\tif(playersMap[_player].depositPricePerShare == 0) return 0; // User aleady withdrew\\n\\t\\t// We prevent user to receive more LP than deposited in exeptional case where pPS disminushes\\n\\t\\tpPS = (pPS < playersMap[_player].depositPricePerShare) ? playersMap[_player].depositPricePerShare : pPS;\\n\\t\\tamount = depositAmount * playersMap[_player].depositPricePerShare / pPS;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the rank of the player\\n\\t * @dev 50% shared for 1st rank, 25% shared for 2nd rank, etc. 1 ether = 100%\\n\\t * @param _player The player address\\n\\t * @return rank The player's rank\\n\\t * @return split The number of players sharing the same rank\\n\\t */\\n\\tfunction getRank(address _player) public view returns (uint16 rank, uint16 split) {\\n\\t\\tif(!isPlayer(_player)) return (0, 0);\\n\\t\\tuint16 cumulativePlayers;\\n\\t\\tfor(uint16 i=topScore; i>=playersMap[_player].score; i--) {\\n\\t\\t\\tif(scoreToPlayers[i].length > 0) {\\n\\t\\t\\t\\tcumulativePlayers += uint16(scoreToPlayers[i].length);\\n\\t\\t\\t\\trank += 1;\\n\\t\\t\\t}\\n\\t\\t\\tif(i == 0) { // If the player did not score, he won't be in in the mapping\\n\\t\\t\\t\\trank += 1;\\n\\t\\t\\t\\tsplit = uint16(players.length) - cumulativePlayers;\\n\\t\\t\\t\\treturn (rank, split);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsplit = uint16(scoreToPlayers[playersMap[_player].score].length);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the share of the pool prize earned by the player\\n\\t * @dev 50% shared for 1st rank, 25% shared for 2nd rank, etc. 1 ether = 100%\\n\\t * @param _player The player address\\n\\t * @return share The player's share\\n\\t */\\n\\tfunction getPrizeShare(address _player) public view returns (uint64 share) {\\n\\t\\t// TODO: how to manage rewards if the number of different ranks is low?\\n\\t\\t(uint256 rank, uint256 split) = getRank(_player);\\n\\t\\tif(split == 0) return 0; // Not a player = no share\\n\\t\\tuint8 multiplier = (nbRanks == rank) ? 2 : 1; // We double the allocation for the last rank so that sum of shares is 100%\\n\\t\\tshare = uint64((multiplier * 1 ether / (2 ** rank)) / split);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the total pool prize\\n\\t * @dev The realized pool price is static while remaining pool prize is dynamic\\n\\t * @return amount The pool prize amount\\n\\t */\\n\\tfunction getPoolPrize() public view returns (uint256 amount) {\\n\\t\\tamount = realizedPoolPrize + getRemainingPoolPrize();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the amount of pool prize left\\n\\t * @dev The number of LP tokens will be obtained from the players that did not withdraw yet\\n\\t * @return amount The remaining pool prize amount\\n\\t */\\n\\tfunction getRemainingPoolPrize() public view returns (uint256 amount) {\\n\\t\\tuint256 extraLP = 0;\\n\\t\\tfor (uint i=0; i<players.length; i++) {\\n\\t\\t\\tif(playersMap[players[i]].depositPricePerShare == 0) continue; // The player withdrew, we skip him\\n\\t\\t\\textraLP += depositAmount - withdrawAmountFromDeposit(players[i]);\\n\\t\\t}\\n\\t\\tamount = extraLP * (1 ether - fees) / 1 ether;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the amount of pool prize earned by the user\\n\\t * @dev Unclaimed pool prize is cross multiplied by the player share and divided by the unclaimed shares\\n\\t * @param _player The player address\\n\\t * @return amount The user pool prize amount\\n\\t */\\n\\tfunction getPrizeAmount(address _player) public view returns (uint256 amount) {\\n\\t\\tamount = getRemainingPoolPrize() * getPrizeShare(_player) / unclaimedPoolPrize;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the expected pool prize at the end of the tournament\\n\\t * @dev Current pool prize is cross multiplied by the duration of the tournament and divided by the elapsed time\\n\\t * @return (uint256) The expected pool prize amount\\n\\t */\\n\\tfunction getExpectedPoolPrize() public view returns (uint256) {\\n\\t\\tif(isFuture()) return 0;\\n\\t\\tif(isEnded()) return getPoolPrize();\\n\\t\\treturn getPoolPrize() * (endTime - startTime) / (1 + block.timestamp - startTime); // Add 1 to avoid division by 0\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the amount of fees accrued by the protocol\\n\\t * @return amount The amount of fees\\n\\t */\\n\\tfunction getFees() internal view returns (uint256 amount) {\\n\\t\\tamount = getPoolPrize() * fees / (1 ether - fees);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Converts time in seconds to days\\n\\t * @dev Players can only withdraw if the tournament has ended\\n\\t * @param _time The time in seconds\\n\\t * @return days_ The number of days\\n\\t */\\n\\tfunction timeToDate(uint32 _time) internal pure returns (uint16 days_) {\\n\\t\\tdays_ = uint16(_time / 1 days);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the tournament is ended\\n\\t * @dev Players can only withdraw if the tournament has ended. Use unstakingAllowed() to check if unstaking is allowed\\n\\t * @return ended\\n\\t */\\n\\tfunction isEnded() public view returns (bool ended) {\\n\\t\\tended = timeToDate(uint32(block.timestamp)) >= timeToDate(endTime);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the tournament is not yet started\\n\\t * @dev Players can only stake if the tournament is future. Use stakingAllowed() to check if staking is allowed\\n\\t * @return future\\n\\t */\\n\\tfunction isFuture() public view returns (bool future) {\\n\\t\\tfuture = timeToDate(uint32(block.timestamp)) < timeToDate(startTime);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the tournament is active\\n\\t * @dev Players can only play if the tournament is active\\n\\t * @return active\\n\\t */\\n\\tfunction isActive() public view returns (bool active) {\\n\\t\\tactive = !isFuture() && !isEnded();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the player is registered in this tournament\\n\\t * @dev Returns true if the player has made a deposit and has not yet withdrawn\\n\\t * @param _player The player address\\n\\t * @return isP\\n\\t */\\n\\tfunction isPlayer(address _player) public view returns (bool isP) {\\n\\t\\tisP = playersMap[_player].depositPricePerShare > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the player has already played today\\n\\t * @dev Resets at O0:OO UTC\\n\\t * @param _player The player address\\n\\t */\\n\\tfunction alreadyPlayed(address _player) public view returns (bool) {\\n\\t\\tuint32 today = timeToDate(uint32(block.timestamp));\\n\\t\\tuint32 lastGame = timeToDate(playersMap[_player].lastGame);\\n\\t\\treturn today == lastGame;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the player's score\\n\\t * @param _player The player address\\n\\t */\\n\\tfunction pointsOfPlayer(address _player) public view returns (uint16) {\\n\\t\\treturn playersMap[_player].score;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if staking is allowed\\n\\t * @dev Players can stake anytime until 1 day before the end of the game. If they were able to stake at last minute, they could get a share of the pool prize without any contribution.\\n\\t * @return (bool)\\n\\t */\\n\\tfunction stakingAllowed() public view returns (bool) {\\n\\t\\treturn timeToDate(uint32(block.timestamp)) < timeToDate(endTime - 1 days);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if unstaking is allowed\\n\\t * @dev Players can stake anytime after the end of the game\\n\\t * @return (bool))\\n\\t */\\n\\tfunction unstakingAllowed() public view returns (bool) {\\n\\t\\treturn isEnded();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the number of players\\n\\t * @return number Number of players\\n\\t */\\n\\tfunction getNumberOfPlayers() public view returns (uint16 number) {\\n\\t\\tnumber = uint16(players.length);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the list of all players\\n\\t * @return arr List of players\\n\\t */\\n\\tfunction getPlayers() public view returns (address[] memory arr) {\\n\\t\\tarr = players;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the list of players at a given score\\n\\t * @param _score The score of the players\\n\\t * @return arr List of players\\n\\t */\\n\\tfunction getPlayersAtScore(uint16 _score) public view returns (address[] memory arr) {\\n\\t\\tif(_score == 0) return new address[](0); // We don't return the list of players without any point\\n\\t\\tarr = scoreToPlayers[_score];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns data available on the player\\n\\t * @param _player The address of the player\\n\\t * @return rank of the player\\n\\t * @return score of the player\\n\\t */\\n\\tfunction getPlayer(address _player) public view returns (uint16 rank, uint16 score) {\\n\\t\\t(rank, ) = getRank(_player);\\n\\t\\tscore = playersMap[_player].score;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the number of decimals of the LP token\\n\\t * @return decimals Number of decimals\\n\\t */\\n\\tfunction getLPDecimals() public view returns (uint8 decimals) {\\n\\t\\tdecimals = IERC20Metadata(poolIncentivized).decimals();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the symbol of the pool as defined in the pool contract\\n\\t * @return symbol of the pool\\n\\t */\\n\\tfunction getLPSymbol() public view returns (string memory symbol) {\\n\\t\\tsymbol = IERC20Metadata(poolIncentivized).symbol();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the addresses of the underlying assets\\n\\t * @return token0 (address) for yearn or Uniswap\\n\\t * @return token1 (address) for Uniswap\\n\\t */\\n\\tfunction getUnderlyingAssets() public view returns (address token0, address token1) {\\n\\t\\tif(protocol == Protocol.Uniswap) {\\n\\t\\t\\ttoken0 = UniswapInterface(address(poolIncentivized)).token0();\\n\\t\\t\\ttoken1 = UniswapInterface(address(poolIncentivized)).token1();\\n\\t\\t} else {\\n\\t\\t\\ttoken0 = YearnInterface(address(poolIncentivized)).token();\\n\\t\\t\\ttoken1 = address(0);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the symbol of the pool\\n\\t * @dev If the pool is Uniswapn it adds the symbol of the underlying tokens to UNI-V2\\n\\t * @return symbol \\\"fancy\\\" symbol of the pool\\n\\t */\\n\\tfunction getFancySymbol() public view returns (string memory symbol) {\\n\\t\\tif(protocol == Protocol.Uniswap) {\\n\\t\\t\\taddress token0 = UniswapInterface(address(poolIncentivized)).token0();\\n\\t\\t\\taddress token1 = UniswapInterface(address(poolIncentivized)).token1();\\n\\t\\t\\tstring memory symbol0 = IERC20Metadata(token0).symbol();\\n\\t\\t\\tstring memory symbol1 = IERC20Metadata(token1).symbol();\\n\\t\\t\\tsymbol = string.concat(\\\"UNI-V2 (\\\",symbol0);\\n\\t\\t\\tsymbol = string.concat(symbol, \\\"-\\\");\\n\\t\\t\\tsymbol = string.concat(symbol, symbol1);\\n\\t\\t\\tsymbol = string.concat(symbol, \\\")\\\");\\n\\t\\t} else {\\n\\t\\t\\tsymbol = getLPSymbol();\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xcd5dcff9ed9612553d1b588520cbbf86da98ddcc6483d6208c65c7581a14b6e7\",\"license\":\"MIT\"},\"contracts/TournamentFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Tournament.sol\\\";\\n\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract TournamentFactory {\\n\\t// State Variables\\n\\taddress[] public TournamentArray; // Store deployed contracts\\n\\tmapping(address => Tournament) public TournamentMap;\\n\\tmapping(address => address) public TournamentPartner;\\n\\taddress public owner;\\n\\n\\taddress public implementationContract;\\n\\n    VRFCoordinatorV2Interface private vrfCoordinator;\\n    uint64 public subscriptionId;\\n    bytes32 public gasLane;\\n    uint32 public callbackGasLimit = 1000000;\\n\\n\\tconstructor (address _owner, address _vrfCoordinatorV2) {\\n\\t\\towner = _owner;\\n\\t\\timplementationContract = address(new Tournament());\\n\\n\\t\\tvrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorV2);\\n        subscriptionId = vrfCoordinator.createSubscription();\\n\\n\\t}\\n\\t//// VRF deployment to Avax. @todo make structs for each chain? Pass in struct to createTournament() for vrf constructor args.\\n\\t// uint64 subscriptionId = 1341;\\n\\t// bytes32 gasLane = 0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61;\\n\\t// uint32 callbackGasLimit = 500000;\\n\\t// address vrfCoordinatorV2 = 0x2eD832Ba664535e5886b75D64C46EB9a228C2610;\\n\\n\\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\\n\\tevent TournamentCreated(\\n\\t\\taddress tournament\\n\\t);\\n\\n\\t// Modifier: used to define a set of rules that must be met before or after a function is executed\\n\\tmodifier isOwner() {\\n\\t\\trequire(msg.sender == owner, \\\"Not the Owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * Function that allows anyone to deploy a new tournament contract\\n\\t *\\n\\t * @param _name (string) - name of the tournament\\n\\t * @param _poolIncentivized (address) - address of the pool to incentivize and from which we will accept the LP token\\n\\t * @param _LPTokenAmount (uint256) - amount of the ERC-20 LP token to stake in order to participate\\n\\t * @param _startTime (uint256) - block timestamp at which the tournament starts\\n\\t * @param _endTime (uint256) - block timestamp at which the tournament ends\\n\\t * @return instance (address) - address of the new tournament\\n\\t */\\n\\tfunction createTournament(\\n\\t\\tstring memory _name, \\n\\t\\taddress _poolIncentivized, \\n\\t\\tuint256 _LPTokenAmount, \\n\\t\\tuint32 _startTime, \\n\\t\\tuint32 _endTime\\n\\t) public returns(address instance) {\\n\\t\\tinstance = Clones.clone(implementationContract);\\n\\t\\tTournament(instance).initialize(\\n\\t\\t\\towner, \\n\\t\\t\\t_name, \\n\\t\\t\\t_poolIncentivized, \\n\\t\\t\\t_LPTokenAmount, \\n\\t\\t\\t_startTime, \\n\\t\\t\\t_endTime, \\n\\t\\t\\taddress(this),\\n\\t\\t\\taddress(vrfCoordinator)\\n\\t\\t);\\n\\t\\tTournamentArray.push(instance);\\n\\t\\tTournamentMap[instance] = Tournament(instance);\\n\\t\\tvrfCoordinator.addConsumer(subscriptionId, instance);\\n\\t\\temit TournamentCreated(instance);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the owner to change the chainlink config\\n\\t * @dev Gas lanes for each chain can be found here https://docs.chain.link/vrf/v2/subscription/supported-networks\\n\\t * @param _gasLane (bytes32) - gas lane\\n\\t * @param _callbackGasLimit (uint32) - callback gas limit\\n\\t */\\n\\tfunction setChainlinkConfig(bytes32 _gasLane, uint32 _callbackGasLimit) external isOwner {\\n\\t\\tgasLane = _gasLane;\\n\\t\\tcallbackGasLimit = _callbackGasLimit;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the chainlink config\\n\\t * @dev For use by the proxies when requesting a word to VRF\\n\\t */\\n\\tfunction getVrfConfig() public view returns (uint64, bytes32, uint32) {\\n\\t\\treturn (subscriptionId, gasLane, callbackGasLimit);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an array of all the tournament contracts\\n\\t * @return list (address[] memory) - list of all tournament\\n\\t */\\n\\tfunction getAllTournaments() public view returns (address[] memory list) {\\n\\t\\tlist = TournamentArray;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an array of all the active tournament contracts\\n\\t * @return activeTournaments (address[] memory) - list of all tournament\\n\\t */\\n\\tfunction getAllActiveTournaments() external view returns (address[] memory activeTournaments) {\\n\\t\\tuint activeCount = 0;\\n\\n\\t\\t// First pass: Count the number of active tournaments\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isActive()) {\\n\\t\\t\\t\\tactiveCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Second pass: Populate the array with active tournaments\\n\\t\\tactiveTournaments = new address[](activeCount);\\n\\t\\tuint currentIndex = 0;\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isActive()) {\\n\\t\\t\\t\\tactiveTournaments[currentIndex] = TournamentArray[i];\\n\\t\\t\\t\\tcurrentIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an array of all the past tournament contracts\\n\\t * @return pastTournaments (address[] memory) - list of all tournament\\n\\t */\\n\\tfunction getAllPastTournaments() external view returns (address[] memory pastTournaments) {\\n\\t\\tuint count = 0;\\n\\n\\t\\t// First pass: Count the number of active tournaments\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isEnded()) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Second pass: Populate the array with active tournaments\\n\\t\\tpastTournaments = new address[](count);\\n\\t\\tuint currentIndex = 0;\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isEnded()) {\\n\\t\\t\\t\\tpastTournaments[currentIndex] = TournamentArray[i];\\n\\t\\t\\t\\tcurrentIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an array of all the future tournament contracts\\n\\t * @return futureTournaments (address[] memory) - list of all tournament\\n\\t */\\n\\tfunction getAllFutureTournaments() external view returns (address[] memory futureTournaments) {\\n\\t\\tuint count = 0;\\n\\n\\n\\t\\t// First pass: Count the number of active tournaments\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isFuture()) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Second pass: Populate the array with active tournaments\\n\\t\\tfutureTournaments = new address[](count);\\n\\t\\tuint currentIndex = 0;\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isFuture()) {\\n\\t\\t\\t\\tfutureTournaments[currentIndex] = TournamentArray[i];\\n\\t\\t\\t\\tcurrentIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an array of all the tournament entered by a player\\n\\t * @return playersTournaments (address[] memory) - list of all tournament\\n\\t */\\n\\tfunction getTournamentsByPlayer(address _player) external view returns (address[] memory playersTournaments) {\\n\\t\\tuint count = 0;\\n\\n\\t\\t// First pass: Count the number of active tournaments\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isPlayer(_player)) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Second pass: Populate the array with active tournaments\\n\\t\\tplayersTournaments = new address[](count);\\n\\t\\tuint currentIndex = 0;\\n\\t\\tfor (uint i = 0; i < TournamentArray.length; i++) {\\n\\n\\t\\t\\tif (TournamentMap[TournamentArray[i]].isPlayer(_player)) {\\n\\t\\t\\t\\tplayersTournaments[currentIndex] = TournamentArray[i];\\n\\t\\t\\t\\tcurrentIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Function that returns an array of all the tournament a partner created\\n\\t */\\n\\tfunction getTournamentsByPartner(address _partner) external view returns (address[] memory) {\\n\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns true if the contract is a deployed tournament, false otherwise\\n\\t * @param _contract (address) - address of the contract\\n\\t * @return (bool)\\n\\t */\\n\\tfunction isTournament(address _contract) external view returns (bool) {\\n\\t\\tif(address(TournamentMap[_contract]) == _contract) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n\",\"keccak256\":\"0x93dc9bc3d2945bf99e73aeb03cfecc9e5f37155b666719c873c6e0d742433b54\",\"license\":\"MIT\"},\"contracts/VRFConsumerBaseV2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Upgradeable is Initializable {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address private vrfCoordinator;\\n\\n    function __VRFConsumerBaseV2Upgradeable_init(\\n        address _vrfCoordinator\\n    ) internal onlyInitializing {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomness\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal virtual;\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\",\"keccak256\":\"0x019e2645f72b25f03057b4c2326ffc60f225e677364487e856ba93586f35ba71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createTournament(string,address,uint256,uint32,uint32)": {
        "params": {
          "_LPTokenAmount": "(uint256) - amount of the ERC-20 LP token to stake in order to participate",
          "_endTime": "(uint256) - block timestamp at which the tournament ends",
          "_name": "(string) - name of the tournament",
          "_poolIncentivized": "(address) - address of the pool to incentivize and from which we will accept the LP token",
          "_startTime": "(uint256) - block timestamp at which the tournament starts"
        },
        "returns": {
          "instance": "(address) - address of the new tournament"
        }
      },
      "getAllActiveTournaments()": {
        "returns": {
          "activeTournaments": "(address[] memory) - list of all tournament"
        }
      },
      "getAllFutureTournaments()": {
        "returns": {
          "futureTournaments": "(address[] memory) - list of all tournament"
        }
      },
      "getAllPastTournaments()": {
        "returns": {
          "pastTournaments": "(address[] memory) - list of all tournament"
        }
      },
      "getAllTournaments()": {
        "returns": {
          "list": "(address[] memory) - list of all tournament"
        }
      },
      "getTournamentsByPlayer(address)": {
        "returns": {
          "playersTournaments": "(address[] memory) - list of all tournament"
        }
      },
      "getVrfConfig()": {
        "details": "For use by the proxies when requesting a word to VRF"
      },
      "isTournament(address)": {
        "params": {
          "_contract": "(address) - address of the contract"
        },
        "returns": {
          "_0": "(bool)"
        }
      },
      "setChainlinkConfig(bytes32,uint32)": {
        "details": "Gas lanes for each chain can be found here https://docs.chain.link/vrf/v2/subscription/supported-networks",
        "params": {
          "_callbackGasLimit": "(uint32) - callback gas limit",
          "_gasLane": "(bytes32) - gas lane"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createTournament(string,address,uint256,uint32,uint32)": {
        "notice": "Function that allows anyone to deploy a new tournament contract"
      },
      "getAllActiveTournaments()": {
        "notice": "Returns an array of all the active tournament contracts"
      },
      "getAllFutureTournaments()": {
        "notice": "Returns an array of all the future tournament contracts"
      },
      "getAllPastTournaments()": {
        "notice": "Returns an array of all the past tournament contracts"
      },
      "getAllTournaments()": {
        "notice": "Returns an array of all the tournament contracts"
      },
      "getTournamentsByPartner(address)": {
        "notice": "Function that returns an array of all the tournament a partner created"
      },
      "getTournamentsByPlayer(address)": {
        "notice": "Returns an array of all the tournament entered by a player"
      },
      "getVrfConfig()": {
        "notice": "Returns the chainlink config"
      },
      "isTournament(address)": {
        "notice": "Returns true if the contract is a deployed tournament, false otherwise"
      },
      "setChainlinkConfig(bytes32,uint32)": {
        "notice": "Allows the owner to change the chainlink config"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3723,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "TournamentArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3728,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "TournamentMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(Tournament)3713)"
      },
      {
        "astId": 3732,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "TournamentPartner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3734,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3736,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "implementationContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3739,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(VRFCoordinatorV2Interface)95"
      },
      {
        "astId": 3741,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 3743,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "gasLane",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 3746,
        "contract": "contracts/TournamentFactory.sol:TournamentFactory",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Tournament)3713": {
        "encoding": "inplace",
        "label": "contract Tournament",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)95": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(Tournament)3713)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Tournament)",
        "numberOfBytes": "32",
        "value": "t_contract(Tournament)3713"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}